axios.defaults.baseURL = 'http://localhost:8080/rest/s1/foi';
axios.defaults.withCredentials = true;


var GeoService = { 
    getCountries: function () { return axios.get("/geos").then(function (a) { return a.data }).then(function(data) {return data.resultList}) }, 
    getRegions: function (a) { return axios.get("/geos/" + a + "/regions").then(function (b) { return b.data }).then(function(data) {return data.resultList}) }, 
    getLocale: function () { return axios.get("/locale").then(function (a) { return a.data }) }, 
    getTimeZone: function () { return axios.get("/timeZone").then(function (a) { return a.data }) }
}, LoginService = {
    login: function (a, b) { return axios.post("/login", a, b).then(function (c) { return c.data }) },
    loginAnonymous: function (a, b) { return axios.post("/loginAnonymous", a, b).then(function (c) { return c.data }) },
    loginFB: function (a, b) { return axios.post("/loginFB", a, b).then(function (c) { return c.data }) }, 
    createAccount: function (a, b) { return axios.post("/register", a, b).then(function (c) { return c.data }) }, 
    logout: function (b) { return axios.get("/logout", {}, b).then(function (c) { return c.data }) }, 
    resetPassword: function (a, b) { return axios.post("/resetPassword", a, b).then(function (c) { return c.data }) }
}, CustomerService = {
    getShippingAddresses: function (a) { var b = (new Date).getTime(); return axios.get("/customer/shippingAddresses?timeStamp\x3d" + b, a).then(function (c) { return c.data }) }, 
    saveShippingAddress: function (a, b) { return axios.put("/customer/shippingAddresses", a, b).then(function (c) { return c.data }) }, 
    getPaymentMethods: function (a) { var b = (new Date).getTime(); return axios.get("/customer/paymentMethods?timeStamp\x3d" + b, a).then(function (c) { return c.data }) }, 
    addPaymentMethod: function (a, b) { return axios.put("/customer/paymentMethods", a, b).then(function (c) { return c.data }) }, 
    getCustomerOrders: function (a) { return axios.get("/customer/orders", a).then(function (b) { return b.data }) }, 
    getCustomerOrderById: function (a, b) { return axios.get("/customer/orders/" + a, b).then(function (c) { return c.data }) }, 
    getCustomerInfo: function (a) { return axios.get("/customer/info").then(function (b) { return b.data }) },
    updateCustomerInfo: function (a, b) { return axios.put("/customer/updateInfo", a, b).then(function (c) { return c.data }) }, 
    updateCustomerPassword: function (a, b) { return axios.put("/customer/updatePassword", a, b).then(function (c) { return c.data }) },
    deletePaymentMethod: function (a, b) { return axios.delete("/customer/paymentMethods/" + a, b).then(function (c) { return c.data }) }, 
    deleteShippingAddress: function (a, b, c) { return axios.delete("/customer/shippingAddresses?contactMechId\x3d" + a + "\x26contactMechPurposeId\x3d" + b, c).then(function (d) { return d.data }) }
}, ProductService = {
    getFeaturedProducts: function () { return axios.get("/categories/PopcAllProducts/products").then(function (a) { return a.data.productList }) }, 
    getProductBySearch: function (a,b, c, d) { a = "term\x3d" + a + "\x26pageIndex\x3d" + b + "\x26pageSize\x3d" + c; d && d.length && (a += "\x26productCategoryId\x3d" + d); return axios.get("/products/search?" + a).then(function (e) { return e.data }) }, 
    getProductsByCategory: function (a, b, c) { return axios.get("/categories/" + a + "/products?pageIndex\x3d" + (b + "\x26pageSize\x3d" + c)).then(function (d) { return d.data }) }, 
    getCategoryInfoById: function (a) { return axios.get("/categories/" + a + "/info").then(function (b) { return b.data }) }, 
    getSubCategories: function (a) {return axios.get("/categories/" + a + "/info").then(function (b) { return b.data.subCategoryList }) }, 
    getProduct: function (a) { return axios.get("/products/" + a).then(function (b) { return b.data }) }, 
    getProductContent: function (a, b) { return axios.get("/products/content?productId\x3d" + a + "\x26productContentTypeEnumId\x3d" + b).then(function (c) { return c.data }) }, 
    addProductCart: function (a, b) { return axios.post("/cart/add", a, b).then(function (c) { return c.data }) }, 
    getCartInfo: function (a) { var b = (new Date).getTime(); return axios.get("/cart/info?timeStamp\x3d" + b, a).then(function (c) { return c.data }) }, 
    addCartBillingShipping: function (a, b) { return axios.post("/cart/billingShipping", a, b).then(function (c) { return c.data }) }, 
    getCartShippingOptions: function (a) { return axios.get("/cart/shippingOptions", a).then(function (b) { return b.data }) }, 
    placeCartOrder: function (a, b) { 
        return axios.post("/cart/place", a, b).then(function (c) { return c.data }) 
    }, 
    checkoutCartOrder: function (a, b) { 
        return axios.post("/cart/checkout", a, b).then(function (c) { return c.data }) 
    }, 
    updateProductQuantity: function (a, b) { return axios.post("/cart/updateProductQuantity", a, b).then(function (c) { return c.data }) }, 
    deleteOrderProduct: function (a, b, c) { return axios.delete("/cart/deleteOrderItem?orderId\x3d" + a + "\x26orderItemSeqId\x3d" + b, c).then(function (d) { return d.data }) }, 
    addPromoCode: function (a, b) { return axios.post("/cart/promoCode", a, b).then(function (c) { return c.data }) }, 
    deletePromoCode: function (a, b) { return axios.delete("/cart/promoCode", { data: a, headers: b }).then(function (c) { return c.data }) }
};