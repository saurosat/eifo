---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 12/7/23 9:46 AM
---
if not eifo then
    eifo = {}
end
if eifo.store then
    return eifo.store;
end
local req = ngx.req
local var = ngx.var
local utils = require("eifo.utils")
local bit = require("bit")

eifo.store = utils.newTable(0, 9)
eifo.store.load = function(self)
    local eds = require("eifo.dao")
    local conn = require("eifo.dbconn").redis()
    conn:connect()
    self.ev = eds.ProductStore:get(self.storeId, conn)
    conn:disconnect()
    if self.ev then
        self.secretKey = self.ev.values["secretKey"]
    end
    if not self.secretKey then
        self.secretKey = var.secretKey
    end
    ngx.log(ngx.INFO, "Secret key ="..self.secretKey)
    self.hashValue = self:hash(self.secretKey)
    self.hashValue = self:hash(self.storeId)
end
eifo.store.getSessionToken = function(self)
    return string.format("%08x", self:hash(self:getClientIp()))
end
eifo.store.hash = function(self, msg)
    local bytes = {string.byte(msg, 1, -1)}
    local h = self.hashValue
    for i = 1, #bytes, 1 do
        h = h * 31 + bit.band(bytes[i], 0xff)
    end
    h = bit.band(h, 0xffffffff)
    return h
end
eifo.store.getClientIp = function(self)
    local headers = req.get_headers()
    local ip = nil
    for i = 1, #self.ipHeaders, 1 do
        local hIp = headers[self.ipHeaders[i]]
        if hIp ~= nil and string.len(hIp) > 0 then
            hIp = string.lower(hIp)
            if hIp ~= "unknown" then
                ip = hIp
                break
            end
        end
    end
    if(ip == nil) then
        return ngx.var.remote_addr
    end
    return ip
end

eifo.store.storeId = ngx.var.storeId
ngx.log(ngx.INFO, "StoreID = "..eifo.store.storeId)
eifo.store.hashValue = 0
eifo.store.ipHeaders = utils.newTable(11, 0)
eifo.store.ipHeaders[1] = "X-Forwarded-For"
eifo.store.ipHeaders[2] = "Proxy-Client-IP"
eifo.store.ipHeaders[3] = "WL-Proxy-Client-IP"
eifo.store.ipHeaders[4] = "HTTP_X_FORWARDED_FOR"
eifo.store.ipHeaders[5] = "HTTP_X_FORWARDED"
eifo.store.ipHeaders[6] = "HTTP_X_CLUSTER_CLIENT_IP"
eifo.store.ipHeaders[7] = "HTTP_CLIENT_IP"
eifo.store.ipHeaders[8] = "HTTP_FORWARDED_FOR"
eifo.store.ipHeaders[9] = "HTTP_FORWARDED"
eifo.store.ipHeaders[10] = "HTTP_VIA"
eifo.store.ipHeaders[11] = "REMOTE_ADDR"
return eifo.store