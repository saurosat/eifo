---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/22/23 9:55 AM
---

local utils = eifo.utils
local lock = require "eifo.lock"
local template = require("resty.template")
template.load = function (view, plain)
    if plain == true then return view end
    local route, params, noLayout = eifo.route:getRoute(view)
    local content, filePath = route:loadFromFile(params, noLayout)
    if not content then
        local status
        content, status = route:render(params, noLayout)
        if not content or status < 200 or status >= 400 then
            ngx.log(ngx.ERR, "Cannot render layout "..view)
            return view
        end
        route:saveToFile(content, params, noLayout, filePath)
    end
    return content
end
local ngx = ngx

local _view = setmetatable({}, 
    {
        __index = {
            _update = function ()
                ngx.log(ngx.WARN, "_update() is not implemented")
            end
        },
        __eq = function (v1, v2)
            return v1 and v2 and v1.name == v2.name
        end
    }
)

local function newView(viewInfo, fullName)
    ngx.log(ngx.DEBUG, "ViewInfo: "..utils.toJson(viewInfo))
    local view = setmetatable(viewInfo or {}, {__index = _view})
    view.name = fullName

    local tableDef = viewInfo.tableDef 
                    or (viewInfo.tableName and eifo.db.table[viewInfo.tableName])
    view.table = tableDef and tableDef:new({
        toJsonColumns = viewInfo.toJsonColumns,
    })
    local layoutType = type(view.layout)
    if layoutType == "string" then
        view.layoutUri = view.layout
        view.layout = nil
    end
    return view
end

-- function _view:new(viewInfo)
--     local view = setmetatable(viewInfo or {}, self)
--     self.__index = self

--     local tableDef = viewInfo.tableDef 
--                     or assert(viewInfo.tableName and eifo.db.table[viewInfo.tableName])
--     ngx.log(ngx.DEBUG, "ViewInfo: "..utils.toJson(viewInfo))
--     view.table = tableDef and tableDef:new({
--         toJsonColumns = viewInfo.toJsonColumns,
--     })
--     local layoutType = type(view.layout)
--     if layoutType == "string" then
--         view.layoutUri = view.layout
--         view.layout = nil
--     end
--     return view
-- end
_view.loadView = function(fullName, templatePath)
    local viewInfo = require(fullName)
    if not viewInfo or type(viewInfo) ~= "table" then
        return nil
    end

    local view = newView(viewInfo, fullName)
    if not templatePath then
        return view
    end
    
    ngx.log(ngx.INFO, "Initializing template file "..templatePath)
    local content, err = utils.read_file(templatePath)
    if not content then
        ngx.log(ngx.ERR, "Failed to  Initialized template "..templatePath..": "..err)
        return view
    end
    view.template = template.compile(content, "no-cache", true)
    return view
end

function _view:getKey(params)
    if self.key then
        return self.key
    end
    if not params or not next(params) then
        return nil
    end
    return params.key or (#params == 1 and params[1]) or self.table:generateKey(params)
end
function _view:getRecord(conn, params, noLayout)
    if self.record then
        return self.record
    end
    local key = self:getKey(params)
    if not key then
        return nil, nil, (self.name or "root")..": Cannot generate key. No search params"
    end

    local model = self.table:new({conn = conn})
    ngx.log(ngx.DEBUG, (self.name or "root")..": Loading key "..key)
    local record, err = model:loadByKey(key)
    return record, key, err
end
function _view:render(params, noLayout)
    local conn, err = utils.getDbConnection()
    if not conn then
        ngx.log(ngx.ERR, (self.name or "root")..": Cannot get connection, "..(err or ""))
        return nil, ngx.HTTP_INTERNAL_SERVER_ERROR
    end
    conn:connect()
    local record, key, loadingErr = self:getRecord(conn, params, noLayout)
    if not record then
        ngx.log(ngx.INFO, "ERR_NOT_FOUND: "..loadingErr)
        conn:disconnect()
        return nil, ngx.HTTP_NOT_FOUND
    end

    if not self.template then
        conn:disconnect()
        return self.toJson and self:toJson(record) or record:toJson(), ngx.HTTP_OK
    end
    local sHtml = self.template({record = record, main = "{* main *}"}) --> main for layout pre-compile
    if not noLayout then
        self.layout =  self.layout or (self.layoutUri and template.compile(self.layoutUri))
        if self.layout then
            sHtml = self.layout({main = sHtml, record = record})
        end
    end

    conn:disconnect()
    return sHtml, ngx.HTTP_OK
end

return _view