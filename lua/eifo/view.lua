---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/22/23 9:55 AM
---

local utils = eifo.utils
local eds = eifo.dao
local workPermit = eifo.workPermit
local ngx = ngx

local viewClass = setmetatable(utils.newTable(0,8), {__index = function (self, key)
        return nil;
    end})
viewClass.getConn = function (...)
    local conn, err = eifo.db.conn.redis()
    if not conn then
        return nil, err
    end
    conn:connect()
    return conn
end
viewClass.getOutFile = function(self, key)
    if self.componentPath then
        return self.location.."/"..self.name..".html"
    end
    if not key or key == "index" then
        return self.location.."/index.html", "index"
    end
    local prefix = self.modelBuilder.ed.prefix
    local nonPrefixKey = key:sub(prefix:len() + 2, -1)
    return self.location.."/".. nonPrefixKey ..".html", nonPrefixKey
end

viewClass._update = function(self, vModel, _)
    local conn, err = eifo.db.conn.redis()
    if not conn then
        return nil, err
    end
    conn:connect()
    local numRecords = #vModel
    for i = 1, numRecords, 1 do
        local record = vModel[i]
        local outFile, nonPrefixKey = self:getOutFile(record.key)
        workPermit.create(outFile, nonPrefixKey, conn)
        os.remove(outFile)
    end
    conn:disconnect()
end

viewClass.process = function(self, params)
    ngx.log(ngx.INFO, (self.name or "root")..": "..table.concat(params, ","))
    local numParams = (params and #params) or 0
    if numParams == 0 then
        params[1] = "index" --> TODO: create a root ED and only one record with ID='index'
        numParams = 1
    end
    local minParams = self.minParams or 0
    if numParams < minParams then
        ngx.log(ngx.INFO, "Require minimum "..tostring(minParams).." parameter")
        return
    end

    -- IF there is a sub-view has matched name-pattern, pass control to it:
    local subView = self.children[params[1]]
    if subView then
        ngx.log(ngx.INFO, "Dispatch to subview "..subView.name)
        table.remove(params, 1)
        return subView:process(params)
    end

    local conn = self:getConn()
    if not conn then
        utils.responseError(500, "Got some problems! We will fix it soon. Please come back later")
        return
    end
    conn:connect()
    local model, key, err = self:getModel(params, conn)
    if not model then
        if not self.modelBuilder then
            err = "Non-container view without ModelBuilder attached: Name = "..(self.name or "nil")..". Params ="..table.concat(params)
        else
            err = "Entity not found whil searching with params "..table.concat(params)..": "..(err or "(No error info)")
        end
        ngx.log(ngx.INFO, err)
        utils.responseError(ngx.HTTP_NOT_FOUND, "Page not found ")
        conn.disconnect()
        return
    end
    local html = self:getHtml(model)
    ngx.header["Content-type"] = "text/html; charset=utf-8"
    ngx.say(html)

    local outPathFile, evKey = self:getOutFile(key)
    --local wp = {} -- For testing purpose only (delete file manually)
    local wp = workPermit.get(outPathFile, conn) 
    conn:disconnect();
    if wp ~= nil then -- write html to a static file 
        local f = assert(io.open(outPathFile, "w"))
        f:write(html)
        f:close()
    end
end
viewClass.getModel = function(self, params, conn)
    local vModel, key

    if self.modelBuilder then
        key = self.modelBuilder.ed:generateKey(params)
        vModel = self.modelBuilder:newVModel(false, self.ignoredTables or false)
        local vRecord, err = vModel:loadByKey(key, conn)
        if not vRecord then
            err = err or "No records found. Please check maxLevel setting"
            return nil, nil, err
        end
    end
    if self.componentPath then
        if not vModel then
            vModel = {}
        end
        local path = self.componentPath
        for i = 1, #params, 1 do
            path = path.."/"..params[i]
        end
        vModel.pathParam = path
    end
    return vModel, key
end
viewClass.getHtml = function(self, model)
    model = model or {}

    ngx.log(ngx.DEBUG, "\r\n\r\n Start rendering: \r\n")
    local template = require("resty.template").new()
    local fn = template.compile(self.template, "no-cache")
    --ngx.log(ngx.DEBUG, utils.toString(fn))
    -- ngx.log(ngx.NOTICE, utils.toString(v.compile, ":", "\n"))
    ngx.log(ngx.DEBUG, "\r\n\r\n End rendering: \r\n")

    return fn({model = model})
end
viewClass.addSub = function(self, view)
    self.children[view.name] = view
    return self
end
viewClass.createSub = function(self, name, template, modelBuilder, minParams, componentPath)
    local sub = viewClass.new(name, template, modelBuilder, minParams, self, componentPath)
    self:addSub(sub)
    return sub
end
viewClass.new = function(name, template, viewModelClass, minParams, parent, componentPath)
    local basePath = eifo.basePath
    local location = (parent and parent.location) or basePath.."/home" -- TODO: make this configurable
    local path = location.."/"..(name or "")

    if (not componentPath) and name and name:len() > 0 and name ~= "index" then
        location = path
        local ok, _, code = os.rename(location, location) -- check if location exist
        if not ok and code ~= 13 then
            os.execute("mkdir "..location) --TODO: make the mkdir command configurable
        end
    end

    local viewObj = {
        name = name,
        location = location,
        componentPath = componentPath,
        modelBuilder = viewModelClass,
        _observerId = path,
        template = template,
        minParams = minParams,
        parent = parent,
        children = {}
    }    

    setmetatable(viewObj, {__index = viewClass})
    -- subscribe to get notifications from EDs:
    if viewModelClass then
        viewModelClass:_attach(viewObj)
    end
    --ngx.log(ngx.INFO, "\r\n\r\n Render Source Code: \r\n")
    --ngx.log(ngx.INFO, utils.sourceCode(view.render))
    --ngx.log(ngx.INFO, "\r\n_______________________________________________ \r\n")


    return viewObj
end

return viewClass