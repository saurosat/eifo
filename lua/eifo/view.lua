---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/22/23 9:55 AM
---ontroller

--module("eifo.view")

if not eifo then
    eifo = {}
end
if eifo.view then
    return eifo.view
end
local utils = require("eifo.utils")
local basePath = ngx.var.basePath

local eds = require("eifo.dao")
local connFactory = require("eifo.dbconn")
local workPermit = require("eifo.workpermit")
local ngx = ngx

local function visitor(content, tag, name)

end
eifo.view = utils.newTable(0,8)
eifo.view._update = function(self, ev, oldVals)
    local evId = ev.values["key"] or oldVals["key"]
    evId = evId:sub(ev.ed.prefix:len() + 2, -1)

    local outFile = self.location.."/".. evId ..".html"
    os.remove(outFile)

    local conn = self.connPool.redis()
    conn:connect()
    workPermit.create(outFile, evId, conn)
    conn:disconnect()
end
eifo.view.getUri = function(self, id)
    if not id then
        return self.outLocationUri
    end
    return self.outLocationUri.."/"..id
end
eifo.view.process = function(self, params)
    ngx.log(ngx.INFO, (self.name or "index")..": "..table.concat(params, ","))
    local numParams = (params and #params) or 0
    local minParams = self.minParams or 0
    if numParams < minParams then
        ngx.log(ngx.INFO, "Require minimum "..tostring(minParams).." parameter")
        return
    end

    -- IF there is a sub-view has matched name-pattern, pass control to it:
    if numParams > 0 and self.children[params[1]] and params[1]:sub(1, 5) ~= "index" then
        local name = table.remove(params, 1)
        local subDir = self.location.."/"..name
        local ok, err, code = os.rename(subDir, subDir)
        if not ok and code ~= 13 then
            os.execute("mkdir "..subDir) --TODO: make the mkdir command configurable
        end
        return self.children[name]:process(params)
    end

    local outFile = (numParams > 0 and params[1]) or "index"
    local outPathFile = self.location.."/"..outFile..".html"
    --local wp = workPermit.get(outPathFile, conn) -- disable for testing. TODO: re-enable
    local wp = {} -- For testing purpose only (delete file manually)
    if wp ~= nil then
        local model, err = self:getModel(params)
        if err then
            utils.responseError(HTTP_BAD_REQUEST, err..": "..table.concat(params))
            return
        end
        local html = self:getHtml(model)
        local f = assert(io.open(outPathFile, "w"))
        f:write(html)
        f:close()
    else-- other process or thread is generating the same file:
        ngx.sleep(0.5) -- waiting for static content being generated
    end

    -- if the static is not ready, another round trip will continue:
    ngx.log(ngx.INFO, "redirecting to: /home"..self.outLocationUri.."/"..outFile..".html")
    ngx.exec("/home"..self.outLocationUri.."/"..outFile..".html")
end
eifo.view.getModel = function(self, params)
    if not self.model then
        return nil, nil
    end
    local model = require("eifo.model").new(self.model)
    if params and #params > 0 then
        local ok, err = model:setParams(params)
        if not ok then
            return ok, err
        end
    end
    local conn = self.connPool.redis()
    conn:connect()
    model:load(conn)
    conn:disconnect()

    ngx.log(ngx.DEBUG, "eifo.view.getModel\n model.entities = {\n"
            ..utils.toString(model.entities, ":", "\r\n").."\n}\n")
    for k, v in pairs(model.entities) do
        ngx.log(ngx.DEBUG, utils.toString(v, ":", "\r\n"))
    end

    return model
end
eifo.view.getHtml = function(self, model)
    model = model or {}

    ngx.log(ngx.NOTICE, "\r\n\r\n Start rendering: \r\n")
    local template = require("resty.template").new()
    local fn = template.compile(self.view, "no-cache")
    ngx.log(ngx.NOTICE, utils.toString(fn))
    --ngx.log(ngx.NOTICE, utils.toString(v.compile, ":", "\n"))
    ngx.log(ngx.NOTICE, "\r\n\r\n End rendering: \r\n")

    return fn({model = model})
end
eifo.view.addSub = function(self, view)
    self.children[view.name] = view
    return self
end
eifo.view.createSub = function(self, name, view, layout, model, minParams)
    local sub = eifo.view.new(name, view, layout, model, minParams, self)
    self:addSub(sub)
    return sub
end
eifo.view.new = function(name, view, layout, model, minParams, parent)
    local outLocationUri = (parent and parent.outLocationUri) or ""
    local location = (parent and parent.location) or basePath.."/home" -- TODO: make this configurable
    if name and string.len(name) > 0 then
        outLocationUri = outLocationUri.."/"..name
        location = location.."/"..name
    end

    local view = {
        name = name,
        outLocationUri = outLocationUri,
        _observerId = outLocationUri,
        location = location,
        model = model,
        view = view,
        layout = layout,
        minParams = minParams,
        parent = parent,
        children = {},
        connPool = connFactory
    }
    setmetatable(view, {__index = eifo.view})
    -- subscribe to get notifications from EDs:
    if model then
        model:_attach(view)
    end
    --ngx.log(ngx.INFO, "\r\n\r\n Render Source Code: \r\n")
    --ngx.log(ngx.INFO, utils.sourceCode(view.render))
    --ngx.log(ngx.INFO, "\r\n_______________________________________________ \r\n")


    return view
end

return eifo.view