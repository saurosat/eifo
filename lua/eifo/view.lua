---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/22/23 9:55 AM
---

local utils = eifo.utils
local eds = eifo.dao
local workPermit = eifo.workPermit
local ngx = ngx

local viewClass = utils.newTable(0,8)
viewClass.getOutFile = function(self, key)
    if not key or key == "index" then
        return self.location.."/index.html", "index"
    end
    local prefix = self.modelBuilder.ed.prefix
    local nonPrefixKey = key:sub(prefix:len() + 2, -1)
    return self.location.."/".. nonPrefixKey ..".html", nonPrefixKey
end

viewClass._update = function(self, vModel, _)
    local conn = eifo.db.conn.redis()
    conn:connect()
    local numRecords = #vModel
    for i = 1, numRecords, 1 do
        local record = vModel[i]
        local outFile, nonPrefixKey = self:getOutFile(record.key)
        workPermit.create(outFile, nonPrefixKey, conn)
        os.remove(outFile)
    end
    conn:disconnect()
end
viewClass.getUri = function(self, id)
    if not id then
        return self.outLocationUri
    end
    return self.outLocationUri.."/"..id
end
viewClass.process = function(self, params)
    ngx.log(ngx.INFO, (self.name or "root")..": "..table.concat(params, ","))
    local numParams = (params and #params) or 0
    if numParams == 0 then
        params[1] = "index" --> TODO: create a root ED and only one record with ID='index'
        numParams = 1
    end
    local minParams = self.minParams or 0
    if numParams < minParams then
        ngx.log(ngx.INFO, "Require minimum "..tostring(minParams).." parameter")
        return
    end

    -- IF there is a sub-view has matched name-pattern, pass control to it:
    local subView = self.children[params[1]]
    if subView then
        ngx.log(ngx.DEBUG, "calling sub view "..subView.name)
        table.remove(params, 1)
        return subView:process(params)
    end

    local modelBuilder = self.modelBuilder
    local ed = modelBuilder.ed;
    local key = ed:generateKey(params)
    ngx.log(ngx.DEBUG, "Param key = "..key)
    local outPathFile, outFile = self:getOutFile(key)
    --local wp = workPermit.get(outPathFile, conn) -- disable for testing. TODO: re-enable
    local wp = {} -- For testing purpose only (delete file manually)
    if wp ~= nil then
        local model, err = self:getModel(key)
        if not model then
            ngx.log(ngx.DEBUG, "Entity not found whil searching with params "..table.concat(params)..": "..(err or "(No error info)"))
            utils.responseError(ngx.HTTP_NOT_FOUND, "Page not found ")
            return
        end
        local html = self:getHtml(model)
        local f = assert(io.open(outPathFile, "w"))
        f:write(html)
        f:close()
    else-- other process or thread is generating the same file:
        ngx.sleep(0.5) -- waiting for static content being generated
    end
    -- ngx.say(html)
    -- if the static is not ready, another round trip will continue:
    ngx.log(ngx.INFO, "redirecting to: /home"..self.outLocationUri.."/"..outFile..".html")
    ngx.exec("/home"..self.outLocationUri.."/"..outFile..".html")
end
viewClass.getModel = function(self, key)
    if not self.modelBuilder then
        return nil, nil
    end
    local vModel = self.modelBuilder:newVModel()

    local conn = eifo.db.conn.redis()
    conn:connect()
    local vRecord, err = vModel:loadByKey(key, conn)
    conn:disconnect()
    if not vRecord then
        err = err or "No records found. Please check maxLevel setting"
        return nil, err
    end

    ngx.log(ngx.DEBUG, "eifo.view.getModel({"..key.."})\r\n")
    for i = 1, #vModel, 1 do
        ngx.log(ngx.DEBUG, utils.toString(vModel[i], ":", "\r\n"))
        for k, _ in pairs(vModel.rightCols) do
            ngx.log(ngx.DEBUG, "Column '"..k.."'\r\n")
            ngx.log(ngx.DEBUG, utils.toString(vModel[i][k], ":", "\r\n"))
        end
    end

    return vModel
end
viewClass.getHtml = function(self, model)
    model = model or {}

    ngx.log(ngx.DEBUG, "\r\n\r\n Start rendering: \r\n")
    local template = require("resty.template").new()
    local fn = template.compile(self.template, "no-cache")
    ngx.log(ngx.DEBUG, utils.toString(fn))
    --ngx.log(ngx.NOTICE, utils.toString(v.compile, ":", "\n"))
    ngx.log(ngx.DEBUG, "\r\n\r\n End rendering: \r\n")

    return fn({model = model})
end
viewClass.addSub = function(self, view)
    self.children[view.name] = view
    return self
end
viewClass.createSub = function(self, name, template, modelBuilder, minParams)
    local sub = viewClass.new(name, template, modelBuilder, minParams, self)
    self:addSub(sub)
    return sub
end
viewClass.new = function(name, template, viewModelClass, minParams, parent)
    local outLocationUri = (parent and parent.outLocationUri) or ""
    local basePath = eifo.basePath
    local location = (parent and parent.location) or basePath.."/home" -- TODO: make this configurable
    if name and string.len(name) > 0 and name ~= "index" then
        outLocationUri = outLocationUri.."/"..name
        location = location.."/"..name
        local ok, _, code = os.rename(location, location) -- check if location exist
        if not ok and code ~= 13 then
            os.execute("mkdir "..location) --TODO: make the mkdir command configurable
        end
    end

    local viewObj = {
        name = name,
        outLocationUri = outLocationUri,
        _observerId = outLocationUri,
        location = location,
        modelBuilder = viewModelClass,
        template = template,
        minParams = minParams,
        parent = parent,
        children = {}
    }
    setmetatable(viewObj, {__index = viewClass})
    -- subscribe to get notifications from EDs:
    if viewModelClass then
        viewModelClass:_attach(viewObj)
    end
    --ngx.log(ngx.INFO, "\r\n\r\n Render Source Code: \r\n")
    --ngx.log(ngx.INFO, utils.sourceCode(view.render))
    --ngx.log(ngx.INFO, "\r\n_______________________________________________ \r\n")


    return viewObj
end

return viewClass