---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 10/13/23 5:13 AM
---
if not eifo then
    eifo = {}
end
if eifo.model then
    return eifo.model
end
local utils = require("eifo.utils")

local eds = require("eifo.dao")
local function addEntity(self, entityName, ...)
    return self:addEntity1(entityName, false, ...)
end

local function addEntity1(self, entityName, preload, ...)
    if not entityName then
        ngx.log(ngx.ERR, "Entity name is not specified")
        return nil, "Entity name is not specified"
    end
    if not eds[entityName] then
        ngx.log(ngx.ERR, "Entity Definition "..entityName.." is not found")
        return nil, "Entity Definition "..entityName.." is not found"
    end
    self.entities[entityName] = {}
    local eNames = { ...}
    if not self.childENames[entityName] then
        self.childENames[entityName] = utils.newTable(#eNames, 0)
    end
    local childENames = self.childENames[entityName]
    if not self.childPreloads[entityName] then
        self.childPreloads[entityName] = utils.newTable(#eNames, 0)
    end
    local childPreloads = self.childPreloads[entityName]
    for i = 1, #eNames, 1 do
        local eName = eNames[i]
        if eds[eName] then
            local idx = 1
            while idx <= #childENames and childENames[idx] ~= eName do
                idx = idx + 1
            end
            childENames[idx] = eName
            childPreloads[idx] = preload
        end
    end
    return self
end

local function setParams(self, params)
    if not params or #params == 0 then
        return nil, "No params found" -- FIXME: In this case, prepare to load all entities for index page
    end
    for i = 1, #params, 1 do
        local eParams = utils.splitStr(params[i], ".")
        local entityName = table.remove(eParams, 1)
        if not self.entities[entityName] then
            return nil, "Entity '"..entityName.."' is not added"
        end
        if not eds[entityName] then
            return nil, "Entity Definition "..entityName.." is not found"
        end
        self.entities[entityName] = eds[entityName]:new(eParams)
    end
    return self.entities
    -- TODO: to support searching:
    --[[local ev = self.entities[entityName]
    if not ev or utils.isTableEmpty(ev) then
        self.entities[entityName] = eds[entityName]:new(ids)
    else
        local fnIds = eds[entityName].fnIds
        local len = #fnIds
        if len > #ids then
            -- len = #ids  -- TODO: support searching by a part of IDs
            return nil, "Entity Definition "..entityName.." requires "..tostring(len).." IDs"
        end
        for i = 1, len, 1 do
            ev[fnIds[i]]--[[ = ids[i]
        end
    end]]
end
local function loadChildEntities(self, conn, entity)
    local eName = entity.ed.ename
    for i = 1, #self.childENames[eName], 1 do
        local childEName = self.childENames[i]
        -- For each entity, add a field containing array of child entity or child entities'IDs or
        local ids = entity:getChildrenIds(childEName, conn)
        if ids and #ids > 0 then
            entity[childEName] = ids
            -- Preload child entities
            if self.childPreloads[i] then
                entity[childEName].entities =
                    entity:getChildren(childEName, conn, ids)
            end
        end
    end
end
local function load(self, conn)
    for eName, eValue in pairs(self.entities) do
        -- if setParams were not invoked on this eName, eValue should be empty
        -- and there is no condition to search -->. Load all entities
        if utils.isTableEmpty(eValue) then -- if not any ID set, load all
            -- In this case, each item in model.entities stores an array of EV
            self.entities[eName] = eds[eName]:getAll(conn)
            -- For each entity, load all IDs of registered children entities:
            for i = 1, #self.entities[eName], 1 do
                self:loadChildEntities(conn,self.entities[eName][i])
            end
        else
            --eValue is an EV having all ID fields set. This case, each item in model.entities
            -- store only one instance of EV
            eValue:load(conn) -- TODO: fix this to support searching by other fields
            eValue[1] = eValue -- for consistency with case 'if' above
            self:loadChildEntities(conn, eValue)
        end
    end
    return self
end
local _mt = utils.newTable(0, 6)
_mt.load = load
_mt.setParams = setParams
-- _mt.addEntity = addEntity
-- _mt.addPreloadEntity = addPreloadEntity
--_mt._attach = utils.observable._attach
--_mt._detach = utils.observable._detach
--_mt._notify = utils.observable._notify
_mt._update = function(self, ev, oldVals)
    self._notify(ev, oldVals)
end
setmetatable(_mt, utils.observable)
eifo.model = {
    new = function(refModel)
        local model = {}
        model._observerId = "model_"..tostring(math.random())
        model.entities = {}
        model.childENames = {}
        if(refModel) then
            model.preloadENames = refModel.preloadENames
            model.childENames = refModel.childENames
            for k, v in pairs(refModel.entities) do
                model.entities[k] = {}
                -- TODO: Support searching:
                --if utils.isArray(v) and v[0] then
                --    model.entities[k][0] = v[0]
                --end
            end
        end
        setmetatable(model, {__index = _mt})
        return model
    end
}
return eifo.model

