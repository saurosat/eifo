---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/14/23 6:28 PM
---
if not gleecy then
    gleecy = {}
end
if gleecy.redis then
    return gleecy.redis
end
gleecy.redis = {}

local utils = require "utils"
local eName2Info = {
    ProductCategory = {
        id = { "productCategoryId" },
        prefix = "c",
        rel1 = {productCategoryTypeEnumId = "enum:ct"}
    },
    Product = {
        id = { "productId" },
        prefix = "p"
    },
    ProductCategoryRollup = {
        id = {"productCategoryId", "parentProductCategoryId"},
        prefix = "c2c",
        rel1 = {productCategoryId = "c", parentProductCategoryId = "c"}
    },
    ProductCategoryMember = {
        id = {"productCategoryId", "productId", "fromDate"},
        prefix = "c2p",
        rel1 = {productCategoryId = "c", productId = "p"}
    },
    ProductStorePromotion = { prefix = "promo" }
}
gleecy.redis.eName2Info = eName2Info
local ePrefix2Info = {}
for k, v in pairs(eName2Info) do
    ePrefix2Info[v.prefix] = v
end
gleecy.redis.ePrefix2Info = ePrefix2Info
gleecy.redis.redisAgent = require "resty.redis"
gleecy.redis.getConnection = function(host, port, timeout)
    local conn = gleecy.redis.redisAgent:new()
    conn.host = host
    conn.port = port
    conn:set_timeouts(timeout)
    return conn
end
gleecy.redis.closeConnection = function(conn, timeout, poolsize)
    conn:set_keepalive(timeout, poolsize)
end
gleecy.redis.connect = function(conn)
    return conn:connect(conn.host, conn.port)
end
gleecy.redis.hgetall = function(conn, key)
    local listVals = conn:hgetall(key)
    if not listVals or #listVals == 0 then
        return {}
    end
    local hashmap = {}
    for i = 1, #listVals - 1, 2 do
        hashmap[listVals[i]] = listVals[i+1]
    end
    return hashmap
end
gleecy.redis.update = function(entityHashmap)
    local id = utils.popKey(entityHashmap, "id")
    if not id then
        return nil, "Entity ID is expected with key 'id'"
    end

    local entityName = utils.popKey(entityHashmap, "entityName")
    if not entityName then
        return nil, "Entity Name is expected with key 'entityName'"
    end
    local hashType = gleecy.redis.eName2Info[entityName].prefix
    if not hashType then
        return nil, "Entity '" .. entityName .."' events is not subscribed"
    end

    local connection = gleecy.redis.getConnection(1000) --1 second
    local ok, errConn = gleecy.redis.connect(connection, "127.0.0.1", 6379)
    if not ok then
        return nil, "failed to connect to gleecy.redis: "..errConn
    end

    local hash = hashType..":"..id
    local oldTbl = gleecy.redis.hgetall(connection, hash)

    local noOldVal = utils.isTableEmpty(oldTbl)
    local noNewVal = utils.isTableEmpty(entityHashmap)
    if noOldVal and noNewVal then
        utils.responseError(ngx.HTTP_BAD_REQUEST, "Cannot DELETE: Entity ID ('"..id.."') does not exist")
        gleecy.redis.closeConnection(connection, 10000, 50)
        return
    end

    if noOldVal then -- insert new one
        connection:sadd("new:"..hashType, id)
        connection:hmset(hash, entityHashmap)
    elseif noNewVal then -- Delete
        connection:sadd("del:"..hashType, id)
        connection:hmset("del:"..hash, oldTbl)
        connection:del(hash)
    else -- update existing one
        for key, val in pairs(oldTbl) do
            if not entityHashmap[key] or entityHashmap[key] == val then
                entityHashmap[key] = nil
                oldTbl[key] = nil
            end
        end
        if isTableEmpty(entityHashmap) then
            ngx.say("Found no differences in request data. Do nothing")
        else
            connection:sadd("set:"..hashType, id)
            connection:hmset("set:"..hash, oldTbl)
            connection:hmset(hash, entityHashmap)
        end
    end
end

return gleecy.redis