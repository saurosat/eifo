---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/22/23 9:55 AM
---ontroller

--module("gleecy.controller")

if not gleecy then
    gleecy = {}
end
if gleecy.controller then
    return gleecy.controller
end
local utils = require("gleecy.utils")
local basePath = ngx.var.basePath

local eds = require("gleecy.dao")
local connFactory = require("gleecy.dbconn")
local workPermit = require("gleecy.workpermit")
local ngx = ngx

local function visitor(content, tag, name)

end
gleecy.controller = utils.newTable(0,8)
gleecy.controller._update = function(self, ev, oldVals)
    local evId = ev.values["key"] or oldVals["key"]
    evId = evId:sub(ev.ed.prefix:len() + 2, -1)

    local outFile = self.location.."/".. evId ..".html"
    os.remove(outFile)

    local conn = self.connPool.redis()
    conn:connect()
    workPermit.create(outFile, evId, conn)
    conn:disconnect()
end
gleecy.controller.getUri = function(self, id)
    if not id then
        return self.outLocationUri
    end
    return self.outLocationUri.."/"..id
end
gleecy.controller.process = function(self, params)
    ngx.log(ngx.INFO, (self.name or "index")..": "..table.concat(params, ","))
    local minParams = self.minParams
    if minParams > 0 and (not params or #params < minParams) then
        ngx.log(ngx.INFO, "Require minimum "..tostring(minParams).." parameter")
        return
    end
    local outFile = "index"
    if params and #params > 0 then
        if self.children[params[1]] then
            local name = table.remove(params, 1)
            local subDir = self.location.."/"..name
            local ok, err, code = os.rename(subDir, subDir)
            if not ok and code ~= 13 then
                os.execute("mkdir "..subDir) --TODO: make the mkdir command configurable
            end
            return self.children[name]:process(params)
        end

        if self.model then
            local ok, err = self.model:setParams(params)
            if not ok and self.minParams > 0 then
                utils.responseError(HTTP_BAD_REQUEST, "Cann't find definition for : "..table.concat(params)..(err or ""))
                return
            end
        end
        outFile = params[1]
    end
    local outPathFile = self.location.."/"..outFile..".html"
    local conn = self.connPool.redis()
    conn:connect()
    --local wp = workPermit.get(outPathFile, conn)
    local wp = {}
    if wp ~= nil and self.model then
        self.model:load(conn)
        ngx.log(ngx.NOTICE, "self.model.entities = {\n"..utils.toString(self.model.entities, ":", "\r\n").."\n}\n")
        for k, v in pairs(self.model.entities) do
            ngx.log(ngx.NOTICE, utils.toString(v, ":", "\r\n"))
        end
    end
    conn:disconnect()
    if wp ~= nil then
        ngx.log(ngx.NOTICE, "\r\n\r\n Start rendering: \r\n")
        local template = require("resty.template").new()
        local fn = template.compile(self.view, "no-cache")
        ngx.log(ngx.NOTICE, utils.toString(fn))
        --ngx.log(ngx.NOTICE, utils.toString(v.compile, ":", "\n"))
        local html = fn({model = self.model})
        ngx.log(ngx.NOTICE, "\r\n\r\n End rendering: \r\n")
        local f = assert(io.open(outPathFile, "w"))
        f:write(html)
        f:close()
    else -- other process or thread is generating the same file:
        ngx.sleep(0.5) -- waiting for static content being generated
    end
    -- if the static is not ready, another round trip will continue:
    ngx.log(ngx.INFO, "redirecting to: /home/"..self.outLocationUri.."/"..outFile..".html")
    ngx.exec("/home"..self.outLocationUri.."/"..outFile..".html")
end
gleecy.controller.addSub = function(self, controller)
    self.children[controller.name] = controller
    return self
end
gleecy.controller.createSub = function(self, name, view, layout, model, minParams)
    local sub = gleecy.controller.new(name, view, layout, model, minParams, self)
    self:addSub(sub)
    return sub
end
gleecy.controller.new = function(name, view, layout, model, minParams, parent)
    local outLocationUri = (parent and parent.outLocationUri) or ""
    local location = (parent and parent.location) or basePath.."/home" -- TODO: make this configurable
    if name and string.len(name) > 0 then
        outLocationUri = outLocationUri.."/"..name
        location = location.."/"..name
    end

    local controller = {
        name = name,
        outLocationUri = outLocationUri,
        _observerId = outLocationUri,
        location = location,
        model = model,
        view = view,
        layout = layout,
        minParams = minParams,
        parent = parent,
        children = {},
        connPool = connFactory
    }
    setmetatable(controller, {__index = gleecy.controller})
    -- subscribe to get notifications from EDs:
    if model then
        model:_attach(controller)
    end
    --ngx.log(ngx.INFO, "\r\n\r\n Render Source Code: \r\n")
    --ngx.log(ngx.INFO, utils.sourceCode(controller.render))
    --ngx.log(ngx.INFO, "\r\n_______________________________________________ \r\n")


    return controller
end

return gleecy.controller