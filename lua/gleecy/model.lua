---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 10/13/23 5:13 AM
---
if not gleecy then
    gleecy = {}
end
if gleecy.model then
    return gleecy.model
end
local utils = require("gleecy.utils")

local eds = require("gleecy.dao")
local function addEntity(self, entityName, ...)
    if not entityName then
        ngx.log(ngx.ERR, "Entity name is not specified")
        return nil, "Entity name is not specified"
    end
    if not eds[entityName] then
        ngx.log(ngx.ERR, "Entity Definition "..entityName.." is not found")
        return nil, "Entity Definition "..entityName.." is not found"
    end
    self.entities[entityName] = {}
    local childENames = {...}
    for i = 1, #childENames, 1 do
        local eName = childENames[i]
        if eds[eName] then
            self.childENames[#self.childENames + 1] = eName
        end
    end
    return self
end
local function setParams(self, params)
    if not params or #params == 0 then
        return nil, "No params found" -- FIXME: In this case, prepare to load all entities for index page
    end
    for i = 1, #params, 1 do
        local eParams = utils.splitStr(params[i], ".")
        local entityName = table.remove(eParams, 1)
        if not self.entities[entityName] then
            return nil, "Entity '"..entityName.."' is not added"
        end
        if not eds[entityName] then
            return nil, "Entity Definition "..entityName.." is not found"
        end
        self.entities[entityName] = eds[entityName]:new(eParams)
    end
    return self.entities
    -- TODO: to support searching:
    --[[local ev = self.entities[entityName]
    if not ev or utils.isTableEmpty(ev) then
        self.entities[entityName] = eds[entityName]:new(ids)
    else
        local fnIds = eds[entityName].fnIds
        local len = #fnIds
        if len > #ids then
            -- len = #ids  -- TODO: support searching by a part of IDs
            return nil, "Entity Definition "..entityName.." requires "..tostring(len).." IDs"
        end
        for i = 1, len, 1 do
            ev[fnIds[i]]--[[ = ids[i]
        end
    end]]
end
local function load(self, conn)
    for eName, eValue in pairs(self.entities) do
        if utils.isTableEmpty(eValue) then -- if not any ID set, load all
            self.entities[eName] = eds[eName]:getAll(conn)
            ngx.log(ngx.DEBUG)
            for i = 1, #self.entities[eName], 1 do
                local entity = self.entities[eName][i]
                for j = 1, #self.childENames, 1 do
                    local childEName = self.childENames[j]
                    entity[childEName] =  entity:getChildrenIds(childEName, conn)
                end
            end
        else
            eValue:load(conn) -- TODO: fix this to support searching by other fields
            for i = 1, #self.childENames, 1 do
                local keys = eValue:getChildrenIds(self.childENames[i], conn)
                eValue[self.childENames[i]] = utils.newTable(#keys, 0)
                for j = 1, #keys, 1 do
                    local tokens = utils.splitStr(keys[j], ":")
                    eValue[self.childENames[i]][j] = tokens[#tokens]
                end
            end
        end
    end
    return self
end
local _mt = utils.newTable(0, 6)
_mt.load = load
_mt.setParams = setParams
_mt.addEntity = addEntity
--_mt._attach = utils.observable._attach
--_mt._detach = utils.observable._detach
--_mt._notify = utils.observable._notify
_mt._update = function(self, ev, oldVals)
    self._notify(ev, oldVals)
end
setmetatable(_mt, utils.observable)
gleecy.model = {
    new = function(refModel)
        local model = {}
        model._observerId = "model_"..tostring(math.random())
        model.entities = {}
        model.childENames = {}
        if(refModel) then
            model.childENames = refModel.childENames
            for k, v in pairs(refModel.entities) do
                model.entities[k] = {}
                -- TODO: Support searching:
                --if utils.isArray(v) and v[0] then
                --    model.entities[k][0] = v[0]
                --end
            end
        end
        setmetatable(model, {__index = _mt})
        return model
    end
}
return gleecy.model

