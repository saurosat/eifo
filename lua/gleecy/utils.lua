---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 9/14/23 5:00 PM
---
if not gleecy then
    gleecy = {}
end
if gleecy.utils then
    return gleecy.utils
end

local newTable
do
    local ok
    ok, newTable = pcall(require, "table.new")
    if not ok then newTable = function() return {} end end
end
local _lifo = {}
_lifo.__index = {
    pop = function(self)
        local values = self.values
        local len = #values
        local item = values[len]
        values[len] = nil
        return item
    end,
    push = function(self, item)
        local values = self.values
        local newlen = #values + 1
        values[newlen] = item
        return newlen
    end,
    reset = function(self) self.values = {}  end,
    len = function(self) return #self.values   end
}
local lifo = function(initialValues)
    if not gleecy.utils.isArray(initialValues) then
        return nil, "input table must be an array"
    end

    initialValues = initialValues or {}
    return setmetatable({values = initialValues}, _lifo)
end
local isTableEmpty = function(tbl)
    return not tbl or next(tbl) == nil
end
local isArray = function(tbl)
    return not tbl or (type(tbl) == 'table' and (#tbl > 0 or next(tbl) == nil))
end
local isHashTbl = function(tbl)
    return not tbl or type(tbl) == 'table' and #tbl == 0
end
local tbllen = function(tbl)
    local len = 0
    local k = next(tbl)
    while k ~= null do
        k = next(tbl, k)
        len = len + 1
    end
    local arrlen = #tbl
    return arrlen, len - arrlen
end
local keys = function(tbl)
    local _, hlen = gleecy.utils.tbllen(tbl)
    local keys = gleecy.utils.newTable(0, hlen)
    local i=0
    for k,_ in pairs(tbl) do
        i=i+1
        keys[i]=k
    end
    return keys
end
local printTable = function(tbl)
    if not tbl then
        ngx.say("Table is null")
        return
    end
    for k,v in pairs(tbl) do
        ngx.say (k..": "..v.."<br/>")
    end
end
local responseError = function(httpStatus, errMessage)
    ngx.status = httpStatus
    ngx.say("{'message':'"..errMessage.."'}")
    ngx.eof()
end
local popKey = function(tbl, key)
    local val = tbl[key]
    tbl[key] = nil
    return val
end
local mergeRef = function(lTable, rTable)
    if not lTable then
        return rTable
    end
    if not rTable then
        return lTable
    end
    for k,v in pairs(rTable) do
        lTable[k] = v
    end
    return lTable
end
local listToHash = function(list)
    if not list or #list == 0 then
        return list --unchanged
    end

    local hashmap = {}
    for i = 1, #list - 1, 2 do
        hashmap[list[i]] = list[i + 1]
    end
    return hashmap
end
local bubbleRemove = function(list, i)
    local n = #list
    if not list or not i or i <= 0 or i > n then
        return 0
    end
    for k = i, n - 1 do
        list[k] = list[k+1]
    end
    list[n] = nil
end

gleecy.utils = newTable(0, 13)
gleecy.utils.newTable = newTable
gleecy.utils.isArray = isArray
gleecy.utils.isHashTbl = isHashTbl
gleecy.utils.isTableEmpty = isTableEmpty
gleecy.utils.keys = keys
gleecy.utils.popKey = popKey
gleecy.utils.bubbleRemove = bubbleRemove
gleecy.utils.mergeRef = mergeRef
gleecy.utils.listToHash = listToHash
gleecy.utils.tbllen = tbllen
gleecy.utils.printTable = printTable

gleecy.utils.lifo = lifo

gleecy.utils.responseError = responseError
return gleecy.utils