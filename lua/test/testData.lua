---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by tnguyen.
--- DateTime: 10/31/23 10:19 AM
---

local data = {
    {   eName = "ProductCategory",
        cols = { "productCategoryId", "categoryName", "productCategoryTypeEnumId" },
        vals = {
            { "PopcHome", "Home Page", "PctCatalog" },
            { "PopcBrowseRoot", "Browse Root", "PctCatalog" },
            { "PopcAllProducts", "All Products", "PctCatalog" },
            { "PopcDeals", "Deals", "PctCatalog" },
            { "PopcNew", "New Products", "PctCatalog" }
        }
    },
    {   eName = "Product",
        cols = { "productId", "productName", "description", "imageLocation" },
        vals = {
            { "DEMO_001", "Demo One", "For Demo1", "/DEMO_001.webp" },
            { "DEMO_002", "Demo Two", "For Demo2", "/DEMO_002.webp" },
            { "DEMO_003", "Demo Three", "For Demo3", "/DEMO_003.webp" },
            { "DEMO_004", "Demo Four", "For Demo4", "/DEMO_004.webp" },
            { "DEMO_005", "Demo Five", "For Demo5", "/DEMO_005.webp" },
            { "DEMO_006", "Demo Six", "For Demo6", "/DEMO_006.webp" },
            { "DEMO_007", "Demo Seven", "For Demo7", "/DEMO_007.webp" },
            { "DEMO_008", "Demo Eight", "For Demo8", "/DEMO_008.webp" },
            { "DEMO_009", "Demo Nine", "For Demo9", "/DEMO_008.webp" }
        }
    },
    {   eName = "ProductStorePromotion",
        cols = { "storePromotionId", "productStoreId", "itemDescription", "serviceRegisterId", "sequenceNum", "requireCode", "useLimitPerOrder", "useLimitPerCustomer", "useLimitPerPromotion" },
        vals = {
            { "PopcBuyGet", "Buy 1 Get 1 Half Off", "BuyGetDiscount", "10", "Y", "2", "4", "10" },
            { "PopcNewCustomer", "20 25 Discount for New Customers" }
        }
    },
    {   eName = "ProductCategoryMember",
        cols = { "productCategoryId", "productId", "fromDate" },
        vals = {
            { "PopcHome", "DEMO_001", "20231019" },
            { "PopcHome", "DEMO_002", "20231019" }
        }
    }
}

local submit = ngx.location.capture
local escape = ngx.escape_uri
--local readBody = ngx.req.read_body
--readBody
for k = 1, #data do
    local eName = data[k].eName
    local eCols = data[k].cols
    local eValArray = data[k].vals
    ngx.say("<h3>"..eName.."</h3><ul>")
    for i = 1, #eValArray do
        local urlStr = "/notifyChanges?entityName=".. eName
        local eVals = eValArray[i]
        for j = 1, #eVals do
            urlStr = urlStr.."&".. eCols[j].."="..escape(eVals[j])
        end
        local res = submit(urlStr, { method = ngx.HTTP_GET })
        ngx.say("<li>"..urlStr..": "..res.body) --((res.status == ngx.HTTP_OK and "OK") or res.body).."</li>")
    end
    ngx.say("</ul>")
end
--1. start BO
--2. create a vendor
--3. create a store
--4. start appropriate FO server
--5. create data in BO (all the data will be pushed to FO)